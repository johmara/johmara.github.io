[
  {
    "date": "2025-09-05",
    "title": "(Accepted) Visualizing Feature-Oriented Software Evolution",
    "authors": "Kevin Hermann, Johan Martinson, Thorsten Berger",
    "description": "Software systems are becoming increasingly complex, and so does their evolution. Development processes often use the notion of features to plan and organize the development of software systems. While features facilitate understanding and communicating about software systems, the connection to code is often lost, challenging their evolution. Developers often need to recover the location of features in code, which is laborious and error-prone, especially for scattered features. The vision of feature-oriented software evolution advocates maintaining traceability between features and the codebase during development, which requires techniques to make features more comprehensible to stakeholders. In this work, we show how traceability links can be utilized to lift the abstraction level of software assets to the feature level. We present a visualization for facilitating comprehension of software evolution by visualizing their evolution through a timeline, addressing a significant gap in realizing the vision of feature-oriented software evolution. Our visualization fosters system evolution comprehension, and improve feature documentation by providing developers with short term benefits of recording feature locations.",
    "link": "",
    "doi": ""
  },
  {
    "date": "2025-09-05",
    "title": "(Accepted) Lightweight Visualization of Software Features with HAnS-viz",
    "authors": "Johan Martinson, Kevin Hermann, Riman Houbbi, David Stechow, Thorsten Berger",
    "description": "Features offer a way to plan software development, but their locations in software assets are often not known. Existing techniques, such as feature-oriented software development, enable traceability of features by implementing features modularly, but are hard to adopt, since they require heavyweight tooling. We believe that feature traceability should be added during development, using lightweight tooling close to the developers’ activities. However, adding traceability requires encouragement—ideally in terms of techniques that provide immediate benefits to developers. We present HAnS-viz, an IntelliJ IDE plugin that provides feature-oriented visualizations that support developers understand and reason about software systems at the feature level. The visualizations present different kinds of feature characteristics and their location in code. Building on our previous work, HAnS, it uses embedded feature annotations that developers create as they write features to lift code-level assets to feature-level representations. A demo video is available at https://youtube.com/watch?v=e4j40dvJQiQ.",
    "link": "",
    "doi": ""
  },
  {
    "date": "2024-12-09",
    "title": "FM-PRO: A Feature Modeling Process",
    "authors": "Johan Martinson, Wardah Mahmood, Jude Gyimah, Thorsten Berger",
    "description": "Almost any software system needs to exist in multiple variants. While branching or forking—a.k.a. clone & own—are simple and inexpensive strategies, they do not scale well with the number of variants created. Software platforms—a.k.a. software product lines—scale and allow to derive variants by selecting the desired features in an automated, tool-supported process. However, product lines are difficult to adopt and to evolve, requiring mechanisms to manage features and their implementations in complex codebases. Such systems can easily have thousands of features with intricate dependencies. Feature models have arguably become the most popular notation to model and manage features, mainly due to their intuitive, tree-like representation. Introduced more than 30 years ago, thousands of techniques relying on feature models have been presented, including model configuration, synthesis, analysis, and evolution techniques. However, despite many success stories, organizations still struggle with adopting software product lines, limiting the usefulness of such techniques. Surprisingly, no modeling process exists to systematically create feature models, despite them being the main artifact of a product line. This challenges organizations, even hindering the adoption of product lines altogether. We present FM-PRO, a process to engineer feature models. It can be used with different adoption strategies for product lines, including creating one from scratch (pro-active adoption) and re-engineering one from existing cloned variants (extractive adoption). The resulting feature models can be used for configuration, planning, evolution, reasoning about variants, or keeping an overview understanding of complex software platforms. We systematically engineered the process based on empirically elicited modeling principles. We evaluated and refined it in a real-world industrial case study, two surveys with industrial and academic feature-modeling experts, as well as an open-source case study. We hope that FM-PRO helps to adopt feature models and that it facilitates higher-level, feature-oriented engineering practices, establishing features as a better and more abstract way to manage increasingly complex codebases.",
    "link": "assets/publications/FM-PRO-A-Feature-Modeling-Process.pdf",
    "doi": "10.1109/TSE.2024.3513635"
  },
  {
    "date": "2024-09-02",
    "title": "An IDE Plugin for Clone Management",
    "authors": "Ahmad Al Shihabi, Jan Sollmann, Johan Martinson, Wardah Mahmood, Thorsten Berger",
    "description": "Development and maintenance in variant-rich systems often involves the replication of specific software code, known as software cloning. This process allows for code reuse but presents challenges in managing independently evolving variants. This paper discusses the necessity of effective clone management tools to maintain code quality and efficiency. We present an extension to the HAnS IDE plugin. This extension enhances the plugin by supporting basic clone management, and by facilitating the tracking and synchronization of cloned assets and features through a well-designed, lightweight trace database. The plugin is evaluated through unit and integration testing, as well as user experiments, demonstrating its effectiveness in addressing the challenges associated with software cloning. The evaluation results indicate that 80% of participants rated the trace database as intuitive, and 100% rated the notification system as both intuitive and user-friendly.",
    "link": "assets/publications/An-IDE-Plugin-for-Clone-Management.pdf",
    "doi": "10.1145/3646548.3678298"
  },
  {
    "date": "2021-09-06",
    "title": "Hans: Ide-based editing support for embedded feature annotations",
    "authors": "Johan Martinson, Herman Jansson, Mukelabai Mukelabai, Thorsten Berger, Alexandre Bergel, Truong Ho-Quang",
    "description": "When developers maintain or evolve software, they often need to know the locations of features. This proves challenging when the feature locations are not documented, when the code was written by different developers who may have left the organization, or when the developer’s memory of the implementation has faded. Automated feature location techniques are hard to adopt in practice, especially since they boast too many false positives. To address these challenges, embedded feature annotations have been proposed to allow developers to trace features in code during development with minimal effort. However, tool support is needed for developers to effectively record and use these annotations. We propose HAnS as a tool to meet this need; it is implemented as an IntelliJ IDE plugin to support developers seamlessly record feature locations while they write their code. HAnS supports developers when mapping features to software assets, such as files and code fragments, with code completion and syntax highlighting. It also provides functionality to browse feature definitions and locations, as well as refactor features. A demo video is available at https://youtu.be/cx_-ZshHLgA.",
    "link": "assets/publications/HAnS-IDE-Based-Editing-Support-for-Embedded-Feature-Annotations.pdf",
    "doi": "10.1145/3461002.3473072"
  },
  {
    "date": "2021-06-24",
    "title": "MSc Thesis --> Hans: Ide-based editing support for embedded feature annotations",
    "authors": "Johan Martinson, Herman Jansson",
    "description": "One of the most common and widespread activities among software developers is locating features (Krüger, Berger, & Leich, 2019). However, feature location is a costly activity that is challenging and takes considerable effort to perform, as records of a features’ explicit location are rarely kept. In this thesis, HAnS is presented, a plugin for IntelliJ with editing support for embedding feature annotations in source code during development, as embedding feature annotations is shown to be a cheap and reliable way to keep track of feature locations. To implement the plugin, a design science methodology was adopted where we performed user studies to find what features would make HAnS effective. The results of the user studies show that the most important functionality of HAnS is its support for writing feature annotations through convenient code completion, refactoring and navigation of features. The user studies also found that HAnS was effective at reducing the errors created during development that require correction later on. The major drawback of HAnS is its refactoring performance which is slow in larger projects. From these results, we draw the conclusion that the plugin is effective for its purpose, but that further research is needed in the form of a longitudinal study where long term use data is gathered. We also suggest further development to extend the plugin’s functionality.",
    "link": "assets/publications/MSCThesis-Jansson-Martinsson.pdf",
    "doi": "10.1145/3461002.3473072"
  }
]
